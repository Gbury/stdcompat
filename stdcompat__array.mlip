#if OCAML_VERSION >= (4,07,0)
module Floatarray :
sig
  external create : int -> floatarray = "caml_floatarray_create"
  external length : floatarray -> int = "%floatarray_length"
  external get : floatarray -> int -> float = "%floatarray_safe_get"
  external set : floatarray -> int -> float -> unit = "%floatarray_safe_set"
  external unsafe_get : floatarray -> int -> float = "%floatarray_unsafe_get"
  external unsafe_set :
    floatarray -> int -> float -> unit = "%floatarray_unsafe_set"
end
#else
module Floatarray :
sig
  val create : int -> Stdcompat__init.floatarray
  val length : Stdcompat__init.floatarray -> int
  val get : Stdcompat__init.floatarray -> int -> float
  val set : Stdcompat__init.floatarray -> int -> float -> unit
  val unsafe_get : Stdcompat__init.floatarray -> int -> float
  val unsafe_set : Stdcompat__init.floatarray -> int -> float -> unit
end
#endif
(** @since 4.07.0:
    module Floatarray :
    sig
      external create : int -> floatarray = "caml_floatarray_create"
      external length : floatarray -> int = "%floatarray_length"
      external get : floatarray -> int -> float = "%floatarray_safe_get"
      external set :
        floatarray -> int -> float -> unit = "%floatarray_safe_set"
      external unsafe_get :
        floatarray -> int -> float = "%floatarray_unsafe_get"
      external unsafe_set :
        floatarray -> int -> float -> unit = "%floatarray_unsafe_set"
    end *)
#if OCAML_VERSION >= (4,07,0)
val to_seq : 'a array -> 'a Seq.t
#else
val to_seq : 'a array -> 'a Stdcompat__seq.t
#endif
(** @since 4.07.0: val to_seq : 'a array -> 'a Seq.t *)
#if OCAML_VERSION >= (4,07,0)
val to_seqi : 'a array -> (int * 'a) Seq.t
#else
val to_seqi : 'a array -> (int * 'a) Stdcompat__seq.t
#endif
(** @since 4.07.0: val to_seqi : 'a array -> (int * 'a) Seq.t *)
#if OCAML_VERSION >= (4,07,0)
val of_seq : 'a Seq.t -> 'a array
#else
val of_seq : 'a Stdcompat__seq.t -> 'a array
#endif
(** @since 4.07.0: val of_seq : 'a Seq.t -> 'a array *)
#if OCAML_VERSION >= (4,03,0)
external create_float : int -> float array = "caml_make_float_vect"
#else
val create_float : int -> float array
#endif
(** @since 4.03.0:
    external create_float : int -> float array = "caml_make_float_vect" *)
val iter2 : ('a -> 'b -> unit) -> 'a array -> 'b array -> unit
(** @since 4.03.0:
    val iter2 : ('a -> 'b -> unit) -> 'a array -> 'b array -> unit *)
val map2 : ('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array
(** @since 4.03.0:
    val map2 : ('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array *)
val for_all : ('a -> bool) -> 'a array -> bool
(** @since 4.03.0: val for_all : ('a -> bool) -> 'a array -> bool *)
val exists : ('a -> bool) -> 'a array -> bool
(** @since 4.03.0: val exists : ('a -> bool) -> 'a array -> bool *)
val mem : 'a -> 'a array -> bool
(** @since 4.03.0: val mem : 'a -> 'a array -> bool *)
val memq : 'a -> 'a array -> bool
(** @since 4.03.0: val memq : 'a -> 'a array -> bool *)
#if OCAML_VERSION >= (4,03,0)
val make_float : int -> float array
#elif OCAML_VERSION >= (4,02,0)
external make_float : int -> float array = "caml_make_float_vect"
#else
val make_float : int -> float array
#endif
(** @since 4.03.0: val make_float : int -> float array@since 4.02.0:
                                                      external make_float :
                                                        int -> float array =
                                                          "caml_make_float_vect" *)
val fold_right : ('b -> 'a -> 'a) -> 'b array -> 'a -> 'a
(** @since 4.00.0: val fold_right : ('b -> 'a -> 'a) -> 'b array -> 'a -> 'a *)
external length : 'a array -> int = "%array_length"
(** Alias for {!Array.length} *)
external get : 'a array -> int -> 'a = "%array_safe_get"
(** Alias for {!Array.get} *)
external set : 'a array -> int -> 'a -> unit = "%array_safe_set"
(** Alias for {!Array.set} *)
external make : int -> 'a -> 'a array = "caml_make_vect"
(** Alias for {!Array.make} *)
external create : int -> 'a -> 'a array = "caml_make_vect"
(** Alias for {!Array.create} *)
val init : int -> (int -> 'a) -> 'a array
(** Alias for {!Array.init} *)
val make_matrix : int -> int -> 'a -> 'a array array
(** Alias for {!Array.make_matrix} *)
val create_matrix : int -> int -> 'a -> 'a array array
(** Alias for {!Array.create_matrix} *)
val append : 'a array -> 'a array -> 'a array
(** Alias for {!Array.append} *)
val concat : 'a array list -> 'a array
(** Alias for {!Array.concat} *)
val sub : 'a array -> int -> int -> 'a array
(** Alias for {!Array.sub} *)
val copy : 'a array -> 'a array
(** Alias for {!Array.copy} *)
val fill : 'a array -> int -> int -> 'a -> unit
(** Alias for {!Array.fill} *)
val blit : 'a array -> int -> 'a array -> int -> int -> unit
(** Alias for {!Array.blit} *)
val to_list : 'a array -> 'a list
(** Alias for {!Array.to_list} *)
val of_list : 'a list -> 'a array
(** Alias for {!Array.of_list} *)
val iter : ('a -> unit) -> 'a array -> unit
(** Alias for {!Array.iter} *)
val iteri : (int -> 'a -> unit) -> 'a array -> unit
(** Alias for {!Array.iteri} *)
val map : ('a -> 'b) -> 'a array -> 'b array
(** Alias for {!Array.map} *)
val mapi : (int -> 'a -> 'b) -> 'a array -> 'b array
(** Alias for {!Array.mapi} *)
val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b array -> 'a
(** Alias for {!Array.fold_left} *)
val sort : ('a -> 'a -> int) -> 'a array -> unit
(** Alias for {!Array.sort} *)
val stable_sort : ('a -> 'a -> int) -> 'a array -> unit
(** Alias for {!Array.stable_sort} *)
val fast_sort : ('a -> 'a -> int) -> 'a array -> unit
(** Alias for {!Array.fast_sort} *)
external unsafe_get : 'a array -> int -> 'a = "%array_unsafe_get"
(** Alias for {!Array.unsafe_get} *)
external unsafe_set : 'a array -> int -> 'a -> unit = "%array_unsafe_set"
(** Alias for {!Array.unsafe_set} *)
