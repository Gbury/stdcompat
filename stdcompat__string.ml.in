include String

@BEGIN_BEFORE_4_07_0@
let of_seq g = Buffer.contents (Stdcompat__buffer.of_seq g)

let to_seq s = Stdcompat__tools.vec_to_seq length unsafe_get s

let to_seqi s = Stdcompat__tools.vec_to_seqi length unsafe_get s
@END_BEFORE_4_07_0@

@BEGIN_BEFORE_4_05_0@
let index_opt s c =
  Stdcompat__tools.option_find (index s) c

let rindex_opt s c =
  Stdcompat__tools.option_find (rindex s) c

let index_from_opt s i c =
  Stdcompat__tools.option_find (index_from s i) c

let rindex_from_opt s i c =
  Stdcompat__tools.option_find (rindex_from s i) c
@END_BEFORE_4_05_0@

@BEGIN_BEFORE_4_04_0@
let split_on_char c s =
  List.map Bytes.unsafe_to_string
    (Stdcompat__bytes.split_on_char c (Bytes.unsafe_of_string s))
@END_BEFORE_4_04_0@

@BEGIN_BEFORE_4_03_0@
let lowercase_ascii = lowercase

let uppercase_ascii = uppercase

let capitalize_ascii = capitalize

let uncapitalize_ascii = uncapitalize

let equal : t -> t -> bool = ( = )
@END_BEFORE_4_03_0@

@BEGIN_BEFORE_4_02_0@
let init n f =
  let s = create n in
  for i = 0 to n - 1 do
    s.[i] <- f i
  done;
  s

let mapi f s =
  init (length s) (fun i -> f i (unsafe_get s i))
@END_BEFORE_4_02_0@

@BEGIN_BEFORE_4_00_0@
let iteri f s =
  for i = 0 to length s - 1 do
    f i (unsafe_get s i)
  done

let map f s =
  init (length s) (fun i -> f (unsafe_get s i))

let is_space = function
  | ' ' | '\012' | '\n' | '\r' | '\t' -> true
  | _ -> false

let rec rindex_no_space_from i s =
  if i >= 0 && is_space (unsafe_get s i) then
    rindex_no_space_from (pred i) s
  else
    i

let rec index_no_space_between i j s =
  if i <= j && is_space (unsafe_get s i) then
    index_no_space_between (succ i) j s
  else
    i

let trim s =
  let off_end = rindex_no_space_from (length s - 1) s in
  let off_start = index_no_space_between 0 off_end s in
  if off_start > off_end then
    ""
  else if off_start = 0 && off_end = length s - 1 then
    s
  else
    sub s off_start (off_end - off_start + 1)
@END_BEFORE_4_00_0@

@BEGIN_BEFORE_4_13_0@
let empty = ""

let of_bytes = Bytes.to_string

let to_bytes = Bytes.of_string

let cat = ( ^ )

let starts_with ~prefix s =
  Stdcompat__bytes.starts_with ~prefix:(Bytes.unsafe_of_string prefix)
    (Bytes.unsafe_of_string s)

let ends_with ~suffix s =
  Stdcompat__bytes.ends_with ~suffix:(Bytes.unsafe_of_string suffix)
    (Bytes.unsafe_of_string s)

let fold_left f init s =
  Stdcompat__bytes.fold_left f init (Bytes.unsafe_of_string s)

let fold_right f s init =
  Stdcompat__bytes.fold_right f (Bytes.unsafe_of_string s) init

let for_all f s =
  Stdcompat__bytes.for_all f (Bytes.unsafe_of_string s)

let exists f s =
  Stdcompat__bytes.exists f (Bytes.unsafe_of_string s)

let get_uint8 s i =
  Stdcompat__bytes.get_uint8 (Bytes.unsafe_of_string s) i

let get_int8 s i =
  Stdcompat__bytes.get_int8 (Bytes.unsafe_of_string s) i

let get_uint16_ne s i =
  Stdcompat__bytes.get_uint16_ne (Bytes.unsafe_of_string s) i

let get_uint16_be s i =
  Stdcompat__bytes.get_uint16_be (Bytes.unsafe_of_string s) i

let get_uint16_le s i =
  Stdcompat__bytes.get_uint16_le (Bytes.unsafe_of_string s) i

let get_int16_ne s i =
  Stdcompat__bytes.get_int16_ne (Bytes.unsafe_of_string s) i

let get_int16_be s i =
  Stdcompat__bytes.get_int16_be (Bytes.unsafe_of_string s) i

let get_int16_le s i =
  Stdcompat__bytes.get_int16_le (Bytes.unsafe_of_string s) i

let get_int32_ne s i =
  Stdcompat__bytes.get_int32_ne (Bytes.unsafe_of_string s) i

let get_int32_be s i =
  Stdcompat__bytes.get_int32_be (Bytes.unsafe_of_string s) i

let get_int32_le s i =
  Stdcompat__bytes.get_int32_le (Bytes.unsafe_of_string s) i

let get_int64_ne s i =
  Stdcompat__bytes.get_int64_ne (Bytes.unsafe_of_string s) i

let get_int64_be s i =
  Stdcompat__bytes.get_int64_be (Bytes.unsafe_of_string s) i

let get_int64_le s i =
  Stdcompat__bytes.get_int64_le (Bytes.unsafe_of_string s) i
@END_BEFORE_4_13_0@
