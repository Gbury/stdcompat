type t = Complex.t = {
  re: float ;
  im: float }
(** Alias for {!Complex.t} *)
val zero : t
(** Alias for {!Complex.zero} *)
val one : t
(** Alias for {!Complex.one} *)
val i : t
(** Alias for {!Complex.i} *)
val neg : t -> t
(** Alias for {!Complex.neg} *)
val conj : t -> t
(** Alias for {!Complex.conj} *)
val add : t -> t -> t
(** Alias for {!Complex.add} *)
val sub : t -> t -> t
(** Alias for {!Complex.sub} *)
val mul : t -> t -> t
(** Alias for {!Complex.mul} *)
val inv : t -> t
(** Alias for {!Complex.inv} *)
val div : t -> t -> t
(** Alias for {!Complex.div} *)
val sqrt : t -> t
(** Alias for {!Complex.sqrt} *)
val norm2 : t -> float
(** Alias for {!Complex.norm2} *)
val norm : t -> float
(** Alias for {!Complex.norm} *)
val arg : t -> float
(** Alias for {!Complex.arg} *)
val polar : float -> float -> t
(** Alias for {!Complex.polar} *)
val exp : t -> t
(** Alias for {!Complex.exp} *)
val log : t -> t
(** Alias for {!Complex.log} *)
val pow : t -> t -> t
(** Alias for {!Complex.pow} *)
