#if OCAML_VERSION < (4,02,0)
#define UNBOXED
#define NOALLOC
#define _UNBOXED
#define _UNTAGGED
#else
#define UNBOXED [@@unboxed]
#define NOALLOC [@@noalloc]
#define _UNBOXED [@unboxed]
#define _UNTAGGED [@untagged]
#endif

#if OCAML_VERSION < (4,07,0)
external neg : float -> float = "%negfloat"
external add : float -> float -> float = "%addfloat"
external sub : float -> float -> float = "%subfloat"
external mul : float -> float -> float = "%mulfloat"
external div : float -> float -> float = "%divfloat"
external rem : float -> float -> float = "caml_fmod_float" "fmod"
  UNBOXED NOALLOC
external abs : float -> float = "%absfloat"
let infinity = Pervasives.infinity
let neg_infinity = Pervasives.neg_infinity
let nan = Pervasives.nan
#if OCAML_VERSION < (4,03,0)
let pi = 4. *. atan 1.
#else
let pi = 0x1.921fb54442d18p+1
#endif
let max_float = Pervasives.max_float
let min_float = Pervasives.min_float
let epsilon = Pervasives.epsilon_float
external of_int : int -> float = "%floatofint"
external to_int : float -> int = "%intoffloat"
external of_string : string -> float = "caml_float_of_string"
let of_string_opt = Stdcompat__pervasives.float_of_string_opt
let to_string = string_of_float
type fpclass = Pervasives.fpclass =
    FP_normal
  | FP_subnormal
  | FP_zero
  | FP_infinite
  | FP_nan
#if OCAML_VERSION < (4,03,0)
external classify_float : float -> fpclass = "caml_classify_float"
#else
external classify_float : (float _UNBOXED) -> fpclass =
  "caml_classify_float" "caml_classify_float_unboxed" NOALLOC
#endif
external pow : float -> float -> float = "caml_power_float" "pow"
  UNBOXED NOALLOC
external sqrt : float -> float = "caml_sqrt_float" "sqrt"
  UNBOXED NOALLOC
external exp : float -> float = "caml_exp_float" "exp" UNBOXED NOALLOC
external log : float -> float = "caml_log_float" "log" UNBOXED NOALLOC
external log10 : float -> float = "caml_log10_float" "log10"
  UNBOXED NOALLOC
external expm1 : float -> float = "caml_expm1_float" "caml_expm1"
  UNBOXED NOALLOC
external log1p : float -> float = "caml_log1p_float" "caml_log1p"
  UNBOXED NOALLOC
external cos : float -> float = "caml_cos_float" "cos" UNBOXED NOALLOC
external sin : float -> float = "caml_sin_float" "sin" UNBOXED NOALLOC
external tan : float -> float = "caml_tan_float" "tan" UNBOXED NOALLOC
external acos : float -> float = "caml_acos_float" "acos"
  UNBOXED NOALLOC
external asin : float -> float = "caml_asin_float" "asin"
  UNBOXED NOALLOC
external atan : float -> float = "caml_atan_float" "atan"
  UNBOXED NOALLOC
external atan2 : float -> float -> float = "caml_atan2_float" "atan2"
  UNBOXED NOALLOC
external cosh : float -> float = "caml_cosh_float" "cosh"
  UNBOXED NOALLOC
external sinh : float -> float = "caml_sinh_float" "sinh"
  UNBOXED NOALLOC
external tanh : float -> float = "caml_tanh_float" "tanh"
  UNBOXED NOALLOC
external ceil : float -> float = "caml_ceil_float" "ceil"
  UNBOXED NOALLOC
external floor : float -> float = "caml_floor_float" "floor"
UNBOXED NOALLOC

#if OCAML_VERSION < (4,00,0)
let copysign = Stdcompat__pervasives.copysign

let hypot = Stdcompat__pervasives.hypot
#else
external copysign : float -> float -> float
                  = "caml_copysign_float" "caml_copysign"
                  UNBOXED NOALLOC

external hypot : float -> float -> float
               = "caml_hypot_float" "caml_hypot" UNBOXED NOALLOC
#endif

external frexp : float -> float * int = "caml_frexp_float"

#if OCAML_VERSION < (4,03,0)
external ldexp : float -> int -> float = "caml_ldexp_float"
#else
external ldexp :
  (float _UNBOXED) -> (int _UNTAGGED) -> (float _UNBOXED) =
  "caml_ldexp_float" "caml_ldexp_float_unboxed" NOALLOC
#endif

external modf : float -> float * float = "caml_modf_float"
type t = float
external compare : float -> float -> int = "%compare"
let equal x y = compare x y = 0
let hash = Hashtbl.hash

module Array = struct
  type t = Stdcompat__init.floatarray

  include Stdcompat__array.Floatarray
end
#else
 include Float
#endif
