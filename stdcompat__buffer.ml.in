include Buffer

@BEGIN_BEFORE_4_02_0@
let to_bytes = contents

let add_bytes = add_string

let add_subbytes = add_substring
@END_BEFORE_4_02_0@

@BEGIN_BEFORE_3_08_0@
let sub buffer offset length =
  String.sub (contents buffer) offset length

let nth buffer offset =
  (contents buffer).[offset]
@END_BEFORE_3_08_0@

@BEGIN_BEFORE_4_05_0@
let truncate b len =
  let s = sub b 0 len in
  clear b;
  add_string b s
@END_BEFORE_4_05_0@

@BEGIN_BEFORE_4_06_0@
let add_utf_8_uchar b u =
  if Stdcompat__uchar.is_char u then
    add_char b (Stdcompat__uchar.unsafe_to_char u)
  else
    let i = Stdcompat__uchar.to_int u in
    if i <= 0x07FF then
      begin
        add_char b (Char.unsafe_chr (0xC0 lor (i lsr 6)));
        add_char b (Char.unsafe_chr (0x80 lor i land 0x3F));
      end
    else if i <= 0xFFFF then
      begin
        add_char b (Char.unsafe_chr (0xE0 lor (i lsr 12)));
        add_char b (Char.unsafe_chr (0x80 lor (i lsr 6) land 0x3F));
        add_char b (Char.unsafe_chr (0x80 lor i land 0x3F));
      end
    else
      begin
        add_char b (Char.unsafe_chr (0xF0 lor (i lsr 18)));
        add_char b (Char.unsafe_chr (0x80 lor (i lsr 12) land 0x3F));
        add_char b (Char.unsafe_chr (0x80 lor (i lsr 6) land 0x3F));
        add_char b (Char.unsafe_chr (0x80 lor i land 0x3F));
      end

let add_utf_16be_uchar b u =
  let i = Stdcompat__uchar.to_int u in
  if i <= 0xFFFF then
    begin
      add_char b (Char.unsafe_chr (i lsr 8));
      add_char b (Char.unsafe_chr (i land 0xFF));
    end
  else
    let i = i - 0x10000 in
    let hi = 0xD800 lor i lsr 10 in
    let lo = 0xDC00 lor i land 0x3FF in
    add_char b (Char.unsafe_chr (hi lsr 8));
    add_char b (Char.unsafe_chr (hi land 0xFF));
    add_char b (Char.unsafe_chr (lo lsr 8));
    add_char b (Char.unsafe_chr (lo land 0xFF))

let add_utf_16le_uchar b u =
  let i = Stdcompat__uchar.to_int u in
  if i <= 0xFFFF then
    begin
      add_char b (Char.unsafe_chr (i land 0xFF));
      add_char b (Char.unsafe_chr (i lsr 8));
    end
  else
    let i = i - 0x10000 in
    let hi = 0xD800 lor i lsr 10 in
    let lo = 0xDC00 lor i land 0x3FF in
    add_char b (Char.unsafe_chr (hi land 0xFF));
    add_char b (Char.unsafe_chr (hi lsr 8));
    add_char b (Char.unsafe_chr (lo land 0xFF));
    add_char b (Char.unsafe_chr (lo lsr 8))
@END_BEFORE_4_06_0@

@BEGIN_BEFORE_4_07_0@
let add_seq b seq =
  Stdcompat__seq.iter (add_char b) seq

let of_seq g =
  let b = create 32 in
  add_seq b g;
  b

let to_seq b = Stdcompat__tools.vec_to_seq length nth b

let to_seqi b = Stdcompat__tools.vec_to_seqi length nth b
@END_BEFORE_4_07_0@

@BEGIN_BEFORE_3_11_0@
let blit src srcoff dst dstoff len =
  String.blit (contents src) srcoff dst dstoff len
@END_BEFORE_3_11_0@

