#ifdef USE_MAGIC
val filter_map_inplace : ('a -> 'b -> 'b option) -> 'c -> unit

val to_seq : 'a -> ('b * 'c) Stdcompat__seq.t

val to_seq_keys : 'a -> 'b Stdcompat__seq.t

val to_seq_values : 'a -> 'b Stdcompat__seq.t
#else
type ('table, 'key, 'value) dict = {
    clear : 'table -> unit;
    fold : 'a . ('key -> 'value -> 'a -> 'a) -> 'table -> 'a -> 'a;
    add : 'table -> 'key -> 'value -> unit;
    remove : 'table -> 'key -> unit;
    replace : 'table -> 'key -> 'value -> unit;
  }

val filter_map_inplace : ('table, 'key, 'value) dict ->
    ('key -> 'value -> 'value option) -> 'table -> unit

val to_seq :
    (('key -> 'value -> ('key, 'value) list -> ('key, 'value) list) ->
      'table -> ('key, 'value) list -> ('key, 'value) list)
      -> 'table -> ('key * 'value) Stdcompat__seq.t;

val to_seq_keys :
    (('key -> 'value -> ('key, 'value) list -> ('key, 'value) list) ->
      'table -> ('key, 'value) list -> ('key, 'value) list)
      -> 'table -> 'key Stdcompat__seq.t;

val to_seq_values :
    (('key -> 'value -> ('key, 'value) list -> ('key, 'value) list) ->
      'table -> ('key, 'value) list -> ('key, 'value) list)
      -> 'table -> 'value Stdcompat__seq.t;
#endif

val add_seq : ('table -> 'key -> 'value -> unit) -> 'table ->
     ('key * 'value) Stdcompat__seq.t -> unit

val of_seq : (int -> 'table) -> ('table -> 'key -> 'value -> unit) ->
     ('key * 'value) Stdcompat__seq.t -> 'table