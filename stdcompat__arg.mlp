include Arg

#if OCAML_VERSION < (4,05,0)
let read_aux trim sep file =
  let channel = open_in_bin file in
  try
    let buffer = Buffer.create 20 in
    let accu = ref [] in
    let push () =
      let s = Buffer.contents buffer in
      let s =
        if trim && s <> "" && s.[String.length s - 1] = '\r' then
          String.sub s 0 (String.length s - 1)
        else
          s in
      accu := s :: !accu in
    try
      while true do
        let c = input_char channel in
        if c = sep then
          begin
            push ();
            Buffer.clear buffer
          end
        else
          Buffer.add_char buffer c
      done;
      assert false
    with End_of_file ->
      if Buffer.length buffer > 0 then
        push ();
      close_in channel;
      Array.of_list (List.rev !accu)
  with e ->
    close_in_noerr channel;
    raise e

let read_arg =
  read_aux true '\n'

let read_arg0 =
  read_aux false '\x00'

let write_aux sep file args =
  let channel = open_out_bin file in
  try
    Array.iter (fun s -> Printf.fprintf channel "%s%c" s sep) args
  with e ->
    close_out_noerr channel;
    raise e

let write_arg =
  write_aux '\n'

let write_arg0 =
  write_aux '\x00'
#endif
